
LABORATORIO6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ac  00800100  00000310  000003a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000310  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  008001ac  008001ac  00000450  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000480  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009a7  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f7  00000000  00000000  00000ebf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000042a  00000000  00000000  000015b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f8  00000000  00000000  000019e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d9  00000000  00000000  00001ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001d1  00000000  00000000  00001eb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002082  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 b1 00 	jmp	0x162	; 0x162 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e1       	ldi	r30, 0x10	; 16
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 3a       	cpi	r26, 0xAC	; 172
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac ea       	ldi	r26, 0xAC	; 172
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 3b       	cpi	r26, 0xB2	; 178
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 65 01 	call	0x2ca	; 0x2ca <main>
  9e:	0c 94 86 01 	jmp	0x30c	; 0x30c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initUART09600>:
******************************************************************
*/

void initUART09600(void){
	//Configurando los pines RX y TX
	DDRD &= ~(1<<DDD0); //D0 RX como entrada
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8e 7f       	andi	r24, 0xFE	; 254
  aa:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1); //D1 TX como salida
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	8a b9       	out	0x0a, r24	; 10
	
	//Se define el modo de trabajo
	UCSR0A = 0;
  b2:	e0 ec       	ldi	r30, 0xC0	; 192
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	10 82       	st	Z, r1
	UCSR0A |= (1<<U2X0); // Usando el registro de control A. Se configura en Modo Fast U2X0 = 1
  b8:	80 81       	ld	r24, Z
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	80 83       	st	Z, r24
	
	//Se configura el registro de control B
	UCSR0B = 0;
  be:	e1 ec       	ldi	r30, 0xC1	; 193
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0); // Se habilita la interrupcion ISR RX
  c4:	80 81       	ld	r24, Z
  c6:	80 68       	ori	r24, 0x80	; 128
  c8:	80 83       	st	Z, r24
	UCSR0B |= (1<<RXEN0); // Se habilita RX
  ca:	80 81       	ld	r24, Z
  cc:	80 61       	ori	r24, 0x10	; 16
  ce:	80 83       	st	Z, r24
	UCSR0B |= (1<<TXEN0); // Se habilita TX
  d0:	80 81       	ld	r24, Z
  d2:	88 60       	ori	r24, 0x08	; 8
  d4:	80 83       	st	Z, r24
	
	//Se configura el registro de control C
	//Se define el frame
	UCSR0C = 0;
  d6:	e2 ec       	ldi	r30, 0xC2	; 194
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	10 82       	st	Z, r1
	UCSR0C = (1<<UCSZ01)| (1<<UCSZ00); // Define el numero de bits de data en el frame del receiver y el transmitter
  dc:	86 e0       	ldi	r24, 0x06	; 6
  de:	80 83       	st	Z, r24
	//Error%=((BAUDcalculado/BAUD)-1)*100%
	//Usando fosc de 16 MHZ 
	//UBRRn = 207
	//BAUDRATE = 9600 Velocidad de comunicacion serial

	UBRR0 = 207;
  e0:	8f ec       	ldi	r24, 0xCF	; 207
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  e8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  ec:	08 95       	ret

000000ee <writeTextUART>:
}

//Funcion para escribir lineas completas
void writeTextUART(char* text){
  ee:	ac 01       	movw	r20, r24
	uint8_t i;
	for (i=0; text[i]!='\0'; i++){ //Inicia en 0 y para cuando sea nulo \0 -- Caracter Evaluar nueva linea POSTLAB
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	07 c0       	rjmp	.+14     	; 0x102 <writeTextUART+0x14>
		while(!(UCSR0A&(1<<UDRE0))); 
  f4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  f8:	95 ff       	sbrs	r25, 5
  fa:	fc cf       	rjmp	.-8      	; 0xf4 <writeTextUART+0x6>
		UDR0 = text[i]; //Barre todo el arreglo hasta acabar
  fc:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}

//Funcion para escribir lineas completas
void writeTextUART(char* text){
	uint8_t i;
	for (i=0; text[i]!='\0'; i++){ //Inicia en 0 y para cuando sea nulo \0 -- Caracter Evaluar nueva linea POSTLAB
 100:	2f 5f       	subi	r18, 0xFF	; 255
 102:	fa 01       	movw	r30, r20
 104:	e2 0f       	add	r30, r18
 106:	f1 1d       	adc	r31, r1
 108:	30 81       	ld	r19, Z
 10a:	31 11       	cpse	r19, r1
 10c:	f3 cf       	rjmp	.-26     	; 0xf4 <writeTextUART+0x6>
		while(!(UCSR0A&(1<<UDRE0))); 
		UDR0 = text[i]; //Barre todo el arreglo hasta acabar
	}
	
}
 10e:	08 95       	ret

00000110 <intforport>:

//Convierte lo recibido por el buffer en un entero para moder mostrarlo en el puerto
int intforport(char bufferRX_copia){
	return bufferRX_copia - '0'; 
 110:	90 e0       	ldi	r25, 0x00	; 0
}
 112:	c0 97       	sbiw	r24, 0x30	; 48
 114:	08 95       	ret

00000116 <__vector_21>:
	}
		
}

//ADC
ISR(ADC_vect){
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	8f 93       	push	r24
 122:	ef 93       	push	r30
 124:	ff 93       	push	r31
	ADCSRA |= (1<<ADIF);
 126:	ea e7       	ldi	r30, 0x7A	; 122
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	80 61       	ori	r24, 0x10	; 16
 12e:	80 83       	st	Z, r24
}
 130:	ff 91       	pop	r31
 132:	ef 91       	pop	r30
 134:	8f 91       	pop	r24
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <writeMenu>:
******************************************************************
*/

//Escribe el menu
void writeMenu(void){
	writeTextUART("\n Bienvenido! \n");
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	0e 94 77 00 	call	0xee	; 0xee <writeTextUART>
	writeTextUART("\n 1. Leer Potenciometro \n");
 148:	80 e1       	ldi	r24, 0x10	; 16
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	0e 94 77 00 	call	0xee	; 0xee <writeTextUART>
	writeTextUART("\n 2. Enviar ASCII \n");
 150:	8a e2       	ldi	r24, 0x2A	; 42
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	0e 94 77 00 	call	0xee	; 0xee <writeTextUART>
	writeTextUART("\n Ingrese la opción deseada (1 o 2) \n");
 158:	8e e3       	ldi	r24, 0x3E	; 62
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	0e 94 77 00 	call	0xee	; 0xee <writeTextUART>
 160:	08 95       	ret

00000162 <__vector_18>:

******************************************************************
*/
 
//USART_RX
ISR(USART_RX_vect){
 162:	1f 92       	push	r1
 164:	0f 92       	push	r0
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	0f 92       	push	r0
 16a:	11 24       	eor	r1, r1
 16c:	2f 93       	push	r18
 16e:	3f 93       	push	r19
 170:	4f 93       	push	r20
 172:	5f 93       	push	r21
 174:	6f 93       	push	r22
 176:	7f 93       	push	r23
 178:	8f 93       	push	r24
 17a:	9f 93       	push	r25
 17c:	af 93       	push	r26
 17e:	bf 93       	push	r27
 180:	ef 93       	push	r30
 182:	ff 93       	push	r31
	bufferRX = UDR0;
 184:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 188:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <bufferRX>
	while(!(UCSR0A&(1<<UDRE0))); //Si esto esta vacio entonces se manda
 18c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 190:	85 ff       	sbrs	r24, 5
 192:	fc cf       	rjmp	.-8      	; 0x18c <__vector_18+0x2a>
	//UDR0 = bufferRX; //Mete a UDR0 lo que esta en el buffer para enviarlo
	//PORTB=intforport(bufferRX); //Lo recibido lo muestra en el portB
	bufferRX_copia = bufferRX;
 194:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <bufferRX>
 198:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <bufferRX_copia>
	
	unsigned int convertido = intforport(bufferRX_copia);
 19c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <bufferRX_copia>
 1a0:	0e 94 88 00 	call	0x110	; 0x110 <intforport>
	
	if (enviar==0){
 1a4:	20 91 ac 01 	lds	r18, 0x01AC	; 0x8001ac <__data_end>
 1a8:	30 91 ad 01 	lds	r19, 0x01AD	; 0x8001ad <__data_end+0x1>
 1ac:	23 2b       	or	r18, r19
 1ae:	09 f0       	breq	.+2      	; 0x1b2 <__vector_18+0x50>
 1b0:	55 c0       	rjmp	.+170    	; 0x25c <__vector_18+0xfa>
		switch(convertido){
 1b2:	81 30       	cpi	r24, 0x01	; 1
 1b4:	91 05       	cpc	r25, r1
 1b6:	19 f0       	breq	.+6      	; 0x1be <__vector_18+0x5c>
 1b8:	02 97       	sbiw	r24, 0x02	; 2
 1ba:	51 f1       	breq	.+84     	; 0x210 <__vector_18+0xae>
 1bc:	38 c0       	rjmp	.+112    	; 0x22e <__vector_18+0xcc>
			
			case estadoADC: //1
			estado = 1; //Habilita mostrar ADC
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <estado+0x1>
 1c6:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <estado>
			enviar = 0; //No enviar caracteres
 1ca:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <__data_end+0x1>
 1ce:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <__data_end>
			writeTextUART("\n");
 1d2:	8e e0       	ldi	r24, 0x0E	; 14
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	0e 94 77 00 	call	0xee	; 0xee <writeTextUART>
			writeTextUART("\n");
 1da:	8e e0       	ldi	r24, 0x0E	; 14
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	0e 94 77 00 	call	0xee	; 0xee <writeTextUART>
			writeTextUART("\n");
 1e2:	8e e0       	ldi	r24, 0x0E	; 14
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	0e 94 77 00 	call	0xee	; 0xee <writeTextUART>
			writeTextUART("Valor de pot mostrado en barra de LEDs");
 1ea:	84 e6       	ldi	r24, 0x64	; 100
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	0e 94 77 00 	call	0xee	; 0xee <writeTextUART>
			writeTextUART("\n");
 1f2:	8e e0       	ldi	r24, 0x0E	; 14
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	0e 94 77 00 	call	0xee	; 0xee <writeTextUART>
			writeTextUART("\n");
 1fa:	8e e0       	ldi	r24, 0x0E	; 14
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	0e 94 77 00 	call	0xee	; 0xee <writeTextUART>
			writeTextUART("\n");
 202:	8e e0       	ldi	r24, 0x0E	; 14
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	0e 94 77 00 	call	0xee	; 0xee <writeTextUART>
		
			writeMenu(); //Muestra el menu
 20a:	0e 94 a0 00 	call	0x140	; 0x140 <writeMenu>
			break;
 20e:	33 c0       	rjmp	.+102    	; 0x276 <__vector_18+0x114>
			
			
			case estadoASCII: //2
			estado = 0; //Deshabilita mostrar ADC
 210:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <estado+0x1>
 214:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <estado>
			enviar = 1; //Enviar caracteres
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <__data_end+0x1>
 220:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <__data_end>
			writeTextUART("\n ¿Qué carácter desea mostrar? \n");
 224:	8b e8       	ldi	r24, 0x8B	; 139
 226:	91 e0       	ldi	r25, 0x01	; 1
 228:	0e 94 77 00 	call	0xee	; 0xee <writeTextUART>
			break;
 22c:	24 c0       	rjmp	.+72     	; 0x276 <__vector_18+0x114>
			
			default:
			estado = 0; //Deshabilita mostrar ADC
 22e:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <estado+0x1>
 232:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <estado>
			enviar = 0; //No enviar caracteres
 236:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <__data_end+0x1>
 23a:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <__data_end>
			writeTextUART('\n');
 23e:	8a e0       	ldi	r24, 0x0A	; 10
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 77 00 	call	0xee	; 0xee <writeTextUART>
			writeTextUART('Error');
 246:	82 e7       	ldi	r24, 0x72	; 114
 248:	9f e6       	ldi	r25, 0x6F	; 111
 24a:	0e 94 77 00 	call	0xee	; 0xee <writeTextUART>
			writeTextUART('\n');
 24e:	8a e0       	ldi	r24, 0x0A	; 10
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 77 00 	call	0xee	; 0xee <writeTextUART>
			writeMenu();
 256:	0e 94 a0 00 	call	0x140	; 0x140 <writeMenu>
			break;
 25a:	0d c0       	rjmp	.+26     	; 0x276 <__vector_18+0x114>
		}
	}
	
	else{
		enviar = 0; //No enviar caracteres
 25c:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <__data_end+0x1>
 260:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <__data_end>
		PORTB=bufferRX; //Lo recibido lo muestra en el portB
 264:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <bufferRX>
 268:	85 b9       	out	0x05, r24	; 5
		PORTD = (0xC0 & bufferRX); //Lo recibido lo muestra en el portD
 26a:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <bufferRX>
 26e:	80 7c       	andi	r24, 0xC0	; 192
 270:	8b b9       	out	0x0b, r24	; 11
		writeMenu(); //Al terminar, muestra el menu
 272:	0e 94 a0 00 	call	0x140	; 0x140 <writeMenu>
	}
		
}
 276:	ff 91       	pop	r31
 278:	ef 91       	pop	r30
 27a:	bf 91       	pop	r27
 27c:	af 91       	pop	r26
 27e:	9f 91       	pop	r25
 280:	8f 91       	pop	r24
 282:	7f 91       	pop	r23
 284:	6f 91       	pop	r22
 286:	5f 91       	pop	r21
 288:	4f 91       	pop	r20
 28a:	3f 91       	pop	r19
 28c:	2f 91       	pop	r18
 28e:	0f 90       	pop	r0
 290:	0f be       	out	0x3f, r0	; 63
 292:	0f 90       	pop	r0
 294:	1f 90       	pop	r1
 296:	18 95       	reti

00000298 <initADC>:
//Se configura el canal de ADC para hacer la lectura del potenciometro en A0
void initADC(void){
	// Configurando bits de ADC

	// Seleccionando una referencia (Vref)=AVCC=5V
	ADMUX = 0; // Configurando el canal 0
 298:	ec e7       	ldi	r30, 0x7C	; 124
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0);
 29e:	80 81       	ld	r24, Z
 2a0:	80 64       	ori	r24, 0x40	; 64
 2a2:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);
 2a4:	80 81       	ld	r24, Z
 2a6:	8f 77       	andi	r24, 0x7F	; 127
 2a8:	80 83       	st	Z, r24

	// ADLAR - Justificación hacia la izquierda
	ADMUX |= (1 << ADLAR);
 2aa:	80 81       	ld	r24, Z
 2ac:	80 62       	ori	r24, 0x20	; 32
 2ae:	80 83       	st	Z, r24

	ADCSRA = 0;
 2b0:	ea e7       	ldi	r30, 0x7A	; 122
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	10 82       	st	Z, r1
	// ADEN - Habilita o enciende ADC
	ADCSRA |= (1 << ADEN);
 2b6:	80 81       	ld	r24, Z
 2b8:	80 68       	ori	r24, 0x80	; 128
 2ba:	80 83       	st	Z, r24

	// ADIE - Habilita ISR ADC
	ADCSRA |= (1 << ADIE);
 2bc:	80 81       	ld	r24, Z
 2be:	88 60       	ori	r24, 0x08	; 8
 2c0:	80 83       	st	Z, r24

	// Ya que nos encontramos en el rango permitido, es posible usar alta resolución
	// Prescaler 128 > 16MHz / 128 = 125KHz
	ADCSRA |= (1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);
 2c2:	80 81       	ld	r24, Z
 2c4:	87 60       	ori	r24, 0x07	; 7
 2c6:	80 83       	st	Z, r24
 2c8:	08 95       	ret

000002ca <main>:
int enviar = 0; //Enviar o no caracteres 

//******************************************************************

int main(void){
	cli(); //Deshabilita interrupciones
 2ca:	f8 94       	cli
	
	//Como salidas
	DDRB |= 0xFF;
 2cc:	84 b1       	in	r24, 0x04	; 4
 2ce:	8f ef       	ldi	r24, 0xFF	; 255
 2d0:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<PORTD6)|(1<<PORTD7);
 2d2:	8a b1       	in	r24, 0x0a	; 10
 2d4:	80 6c       	ori	r24, 0xC0	; 192
 2d6:	8a b9       	out	0x0a, r24	; 10
	
	initUART09600();
 2d8:	0e 94 53 00 	call	0xa6	; 0xa6 <initUART09600>
	initADC(); //Configura ADC
 2dc:	0e 94 4c 01 	call	0x298	; 0x298 <initADC>
	
	sei(); //Habilita interrupciones
 2e0:	78 94       	sei
	
	writeMenu();
 2e2:	0e 94 a0 00 	call	0x140	; 0x140 <writeMenu>
	
	while (1)
	{
		if (estado == 1){
 2e6:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <estado>
 2ea:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <estado+0x1>
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	d1 f7       	brne	.-12     	; 0x2e6 <main+0x1c>
		ADCSRA |= (1<<ADSC); //Inicia la lectura del ADC
 2f2:	ea e7       	ldi	r30, 0x7A	; 122
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	80 81       	ld	r24, Z
 2f8:	80 64       	ori	r24, 0x40	; 64
 2fa:	80 83       	st	Z, r24
		
		PORTB = ADCH; //Muestra en el puerto el valor del ADC
 2fc:	e9 e7       	ldi	r30, 0x79	; 121
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	80 81       	ld	r24, Z
 302:	85 b9       	out	0x05, r24	; 5
		PORTD = (0xC0 & ADCH);
 304:	80 81       	ld	r24, Z
 306:	80 7c       	andi	r24, 0xC0	; 192
 308:	8b b9       	out	0x0b, r24	; 11
 30a:	ed cf       	rjmp	.-38     	; 0x2e6 <main+0x1c>

0000030c <_exit>:
 30c:	f8 94       	cli

0000030e <__stop_program>:
 30e:	ff cf       	rjmp	.-2      	; 0x30e <__stop_program>
